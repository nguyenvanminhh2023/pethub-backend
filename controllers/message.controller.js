const Messages = require("../models/message.model");

// L·∫•y danh s√°ch tin nh·∫Øn gi·ªØa hai ng∆∞·ªùi d√πng
module.exports.getMessages = async (req, res, next) => {
  try {
    const { from, to } = req.body;
    // T√¨m ki·∫øm t·∫•t c·∫£ c√°c tin nh·∫Øn gi·ªØa hai ng∆∞·ªùi d√πng
    const messages = await Messages.find({
      users: {
        $all: [from, to],
      },
    }).sort({ updatedAt: 1 });
    // console.log("üöÄ ~ messages:", messages.at(-1));

    const projectedMessages = messages.map((msg) => {
      return {
        fromSelf: msg.sender.toString() === from,
        message: msg.message.text,
      };
    });

    res.json(projectedMessages);
  } catch (ex) {
    next(ex);
  }
};

// Th√™m tin nh·∫Øn m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
module.exports.addMessage = async (req, res, next) => {
  try {
    // L·∫•y gi√° tr·ªã c·ªßa "from", "to" v√† "message" t·ª´ y√™u c·∫ßu HTTP
    const { from, to, message } = req.body;
    // T·∫°o b·∫£n ghi tin nh·∫Øn m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
    const data = await Messages.create({
      message: { text: message },
      users: [from, to],
      sender: from,
    });
    if (data) return res.json({ msg: "Message added successfully." });
    else return res.json({ msg: "Failed to add message to the database" });
  } catch (ex) {
    // N·∫øu x·∫£y ra l·ªói, chuy·ªÉn ti·∫øp cho h√†m middleware ti·∫øp theo trongchu·ªói x·ª≠ l√Ω
    next(ex);
  }
};
